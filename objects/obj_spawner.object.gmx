<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lane_xpos = 9 * room_width / 10;

lane_ypos[0] = 2 * room_height / 9;
lane_ypos[1] = 5 * room_height / 9;

for (var i = 0; i &lt; 2; i++) {
    global.lane_occupied[i] = false;
}
one_occupied = false;

spawn_type[0] = obj_pod;
spawn_type[1] = obj_pod_pulse;
spawn_type[2] = obj_pod_stream;

alarm[0] = (global.time_passed+1) * irandom_range(120, 240);
alarm[1] = (global.time_passed+1) * irandom_range(60, 120);
alarm[2] = (global.time_passed+1) * irandom_range(200, 500);
alarm[3] = (global.time_passed+1) * irandom_range(400, 700);

spawn_rate = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn powerup
powerup_xpos = view_wview + 50;
powerup_ypos = irandom_range(110, 600);

var rng = irandom_range(0, 100);

if (rng &lt; 40) {
    instance_create(powerup_xpos + 100, powerup_ypos, obj_powerup_invincible);
} else if (rng &lt; 80) {
    instance_create(powerup_xpos + 100, powerup_ypos, obj_powerup_spd);
} else {
    instance_create(powerup_xpos + 100, powerup_ypos, obj_powerup_rateup);
}

alarm[3] = irandom_range(700, 1000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn chips
chip_xpos = view_wview + 50;
chip_ypos = irandom_range(110, 600);

var time = irandom_range(0, 360);
for (var i = 0; i &lt; 4; i++) {
    var chip = instance_create(chip_xpos + (100 * i), chip_ypos, obj_chip);
    with (chip) {
        t = time + (i * 30);
    }
}

if (global.speed_level == 0) {
    alarm[2] = irandom_range(500, 800);
} else if (global.speed_level == 1) {
    alarm[2] = irandom_range(500, 750);
} else if (global.speed_level == 2) {
    alarm[2] = irandom_range(500, 700);
} else if (global.speed_level == 3) {
    alarm[2] = irandom_range(450, 700);
} else if (global.speed_level == 4) {
    alarm[2] = irandom_range(450, 650);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn pod
var all_occupied = true;
var one_occupied = false;
var none_occupided = false;
for (var i = 0; i &lt; array_length_1d(global.lane_occupied); i++) {
    all_occupied = all_occupied and global.lane_occupied[i];
}
none_occupied = !(global.lane_occupied[0] or global.lane_occupied[1]);
one_occupied = (global.lane_occupied[0] and !global.lane_occupied[1]) or
               (!global.lane_occupied[0] and global.lane_occupied[1]);

if (!all_occupied and !instance_exists(obj_pod_stream)) {
    lane_index = irandom_range(0, array_length_1d(global.lane_occupied)-1);
    while (global.lane_occupied[lane_index]) {
        lane_index = irandom_range(0, array_length_1d(global.lane_occupied)-1); //lol this is a dumb way to do it
    }
    //spawn
    var spawn_rng = irandom_range(0, 100);
    
    if (global.dist &lt; 20) {
        var spawn_index = 0;
    } else if (global.dist &lt; 50) {
        if ((one_occupied or none_occupied) and spawn_rng &lt; 20) {
            var spawn_index = 2;
        } else if (spawn_rng &lt; 80) {
            var spawn_index = 0;
        } else {
            var spawn_index = 1;
        }
    } else if (global.dist &lt; 100) {
        if ((one_occupied or none_occupied) and spawn_rng &lt; 20) {
            var spawn_index = 2;
        } else if (spawn_rng &lt; 50) {
            var spawn_index = 0;
        } else {
            var spawn_index = 1;
        }
    } else {
        if ((one_occupied or none_occupied) and spawn_rng &lt; 33) {
            var spawn_index = 2;
        } else if (spawn_rng &lt; 40) {
            var spawn_index = 0;
        } else {
            var spawn_index = 1;
        }
    }
    
    if (spawn_index == 2) {
        var mid_ypos = (lane_ypos[0] + lane_ypos[1])/2;
        var pod = instance_create(room_width + 100, mid_ypos, spawn_type[spawn_index]);
    } else {
        var pod = instance_create(room_width + 100, lane_ypos[lane_index], spawn_type[spawn_index]);
        global.lane_occupied[lane_index] = true;
    }
    with (pod) {
        target_xpos = other.lane_xpos;
        lane_index = other.lane_index;
    }
    //global.lane_occupied[lane_index] = true;
} else if (instance_exists(obj_pod_stream) and !one_occupied) {
    lane_index = irandom_range(0, array_length_1d(global.lane_occupied)-1);
    while (global.lane_occupied[lane_index]) {
        lane_index = irandom_range(0, array_length_1d(global.lane_occupied)-1); //lol this is a dumb way to do it
    }
    var pod = instance_create(room_width+100, lane_ypos[lane_index], spawn_type[0]);
    global.lane_occupied[lane_index] = true;
    with (pod) {
        target_xpos = other.lane_xpos;
        lane_index = other.lane_index;
    }
}

alarm[1] = (1/spawn_rate) * (global.time_passed+1)*irandom_range(80, 150);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn mine

instance_create(view_wview + 100, 640, obj_mine);

alarm[0] = (1/spawn_rate) * (global.time_passed+1) * irandom_range(60, 120);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(obj_cycle)) {
    for (var i = 0; i &lt; 12; i++) {
        if (alarm[i] &gt; 0) {
            alarm[i] = -1;
        }
    }
}

spawn_rate += 0.00001;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_alarm_manager</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
