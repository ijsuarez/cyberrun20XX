<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pod_friendly</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t = irandom_range(0, 360);
increment = 2;
amplitude = 5;

angle = 0;

xpos = x;
ypos = y;

nozzle_xpos = (x - sprite_get_width(spr_gun));
nozzle_ypos = y;

can_fire = true;

normal_rate = 15;
normal_speed = 5;
shot_rate = normal_rate;
bullet_speed = normal_speed;

counter = 0;

fill_area = 51 * (health / global.max_health);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shot_rate = normal_rate;
bullet_speed = normal_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_fire = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_alarm_manager</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.pause) {
    xpos = lerp(xpos, xhome, 0.05);
    ypos = lerp(ypos, yhome, 0.05);
    
    t = (t + increment) % 360;
    shift = amplitude * dsin(t);
    
    //ypos += vspeed;
    y = ypos + shift;
    
    var xdiff = mouse_x-x;
    var ydiff = mouse_y-y;
    var angle_target = -radtodeg(arctan2(ydiff,xdiff))
    angle = lerp(angle, angle_target, 0.5);
    
    nozzle_xpos = x + lengthdir_x(sprite_get_width(spr_gun), angle);
    nozzle_ypos = y + lengthdir_y(sprite_get_width(spr_gun), angle);
    
    //if (mouse_check_button(mb_right)) {
        //hack
    //} else if (mouse_check_button(mb_left)) {
    if (mouse_check_button(mb_left) or mouse_check_button(mb_right)) {
        //shoot
        if (can_fire) {
            can_fire = false;
            var bullet = instance_create(nozzle_xpos, nozzle_ypos, obj_bullet_player);
            with (bullet) {
                bullet_speed = other.bullet_speed;
                direction = other.angle;
            }
            alarm[0] = shot_rate;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var percent_health = health / global.max_health;
fill_area = lerp(fill_area, 51 * percent_health, 0.2);

if (bullet_speed &gt; normal_speed) {
    counter = (counter + 1) % 5;
    if (counter == 0) {
        draw_sprite_ext(spr_gun_friendly, 1, x, y, 1, 1, angle, c_white, 1);
        draw_sprite(spr_pod_friendly, 1, x, y);
    } else {
        draw_sprite_ext(spr_gun_friendly, 0, x, y, 1, 1, angle, c_white, 1);
        draw_sprite(spr_pod_friendly, 0, x, y);
    }
    draw_set_color(c_white);
    draw_rectangle(x-17, y-20, x-13, y-70, true);
    if (percent_health &gt; 0.5) {
        draw_set_color(make_color_rgb(255 * 2*(0.5-(percent_health-0.5)), 255, 0));
    } else {
        draw_set_color(make_color_rgb(255, 255 * 2*percent_health, 0));
    }
} else if (obj_cycle.hit) {
    draw_sprite_ext(spr_gun_friendly, 1, x, y, 1, 1, angle, c_white, 1);
    draw_sprite(spr_pod_friendly, 1, x, y);
    draw_set_color(c_white);
    draw_rectangle(x-17, y-20, x-13, y-70, true);
} else {
    draw_sprite_ext(spr_gun_friendly, 0, x, y, 1, 1, angle, c_white, 1);
    draw_sprite(spr_pod_friendly, 0, x, y);
    draw_set_color(c_white);
    draw_rectangle(x-17, y-20, x-13, y-70, true);
    if (percent_health &gt; 0.5) {
        draw_set_color(make_color_rgb(255 * 2*(0.5-(percent_health-0.5)), 255, 0));
    } else {
        draw_set_color(make_color_rgb(255, 255 * 2*percent_health, 0));
    }
}
draw_rectangle(x-17, y-19, x-13, y-19-fill_area, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
